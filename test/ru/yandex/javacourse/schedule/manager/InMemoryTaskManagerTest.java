package ru.yandex.javacourse.schedule.manager;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import ru.yandex.javacourse.schedule.tasks.Task;
import ru.yandex.javacourse.schedule.tasks.TaskStatus;

import static org.junit.jupiter.api.Assertions.*;

public class InMemoryTaskManagerTest {

    TaskManager manager;

    @BeforeEach
    public void initManager(){
        manager = Managers.getDefault();
    }

    @Test
    public void testAddTask() {
        Task task = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        manager.addNewTask(task);
        assertEquals(1, manager.getTasks().size(), "task should be added");
        Task addedTask = manager.getTasks().get(0);
        assertEquals(task, addedTask, "added task id should be set");
        Task byIdTask = manager.getTask(task.getId());
        assertEquals(task, byIdTask, "added task id should be found");
    }

    @Test
    public void testAddTaskWithId(){
        Task task = new Task(42, "Test 1", "Testing task 1", TaskStatus.NEW);
        manager.addNewTask(task);
        assertEquals(1, manager.getTasks().size(), "task should be added");
        Task addedTask = manager.getTasks().get(0);
        assertEquals(task, addedTask, "predefined task id should be set");
    }

    @Test
    public void testAddTaskWithAndWithoutId(){
        Task task0 = new Task("Test 1", "Testing task 1", TaskStatus.NEW);
        Task task1 = new Task(2, "Test 2", "Testing task 2", TaskStatus.NEW);
        manager.addNewTask(task0);
        manager.addNewTask(task1);
        assertEquals(2, manager.getTasks().size(), "both tasks must be stored");
        assertEquals(1, task0.getId(), "autogenerated id should be 1");
        assertEquals(2, task1.getId(), "task predefined id should not change");
    }

    @Test
    void testUpdateGenerator() {
        Task task0 = new Task(10,"Test 1", "Testing task 1", TaskStatus.NEW);
        Task task1 = new Task("Test 2", "Test 2", TaskStatus.NEW);
        manager.addNewTask(task0);
        manager.addNewTask(task1);
        assertEquals(11, task1.getId(), "generator must advance after predefined id");
    }

    @Test
    void testPredefinedIdLessOrEqualGeneratorThrows() {
        Task task0 = new Task(2,"Test 1", "Testing task 1", TaskStatus.NEW);
        manager.addNewTask(task0);
        Task conflict = new Task(1, "Test 2", "Testing task 2", TaskStatus.NEW);
        assertThrows(IllegalArgumentException.class,
                () -> manager.addNewTask(conflict),
                "should throw on id <= generator");
    }

    @Test
    void testPredefinedIdCollisionMapThrows() {
        Task task = new Task(1,"Test 1", "Testing task 1", TaskStatus.NEW);
        manager.addNewTask(task);
        Task conflict = new Task(1, "Test 2", "Testing task 2", TaskStatus.NEW);
        assertThrows(IllegalArgumentException.class,
                () -> manager.addNewTask(conflict),
                "should throw on id collision across maps");
    }


    @Test
    public void checkTaskNotChangedAfterAddTask() {
        int id = 1;
        String name = "Test 1";
        String description = "Testing task 1";
        TaskStatus status = TaskStatus.NEW;
        Task task1before = new Task(id, name, description, status);
        manager.addNewTask(task1before);
        Task task1after = manager.getTask(task1before.getId());
        assertEquals(task1after.getId(), id);
        assertEquals(task1after.getDescription(), description);
        assertEquals(task1after.getStatus(), status);
        assertEquals(task1after.getName(), name);
    }
}
